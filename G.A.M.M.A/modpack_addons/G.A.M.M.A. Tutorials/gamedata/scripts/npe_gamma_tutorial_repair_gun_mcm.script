--[[
    
    /-------------------------< NPE example for G.A.M.M.A. >--------------------------\
    |   Creator:     SERIOUS                                                          |
    |   Mod:         G.A.M.M.A. TUTORIALS                                             |
    |   File:        npe_gamma_tutorial_repair_gun_mcm.script                         |
    |   Description: Example implementation of a G.A.M.M.A. specific tutorial in NPE  |
    |   Created:     03.23.2025                                                       |
    |   Last edit:	 03.23.2025                                                       |
    \---------------------------------------------------------------------------------/
    
    For simplicity's sake I just chucked everything I could into this single file. 
    In the future when G.A.M.M.A. will have like 20+ of these tutorials it will be much easier to look through this mod and edit where necessary this way.
    Since everything is in one file the file name must end with `_mcm` otherwise the module won't appear in the MCM menu.
--]]

-- NPE Module template

-- PREPARATION

-- FIRST STEP
--      you need to define the name of this module
--      use as module name the name of your mod main script preceded by npe_
--      for example (mymod.script --> npe_mymod_mcm.script). Therefore the modelname chosen in this example is "npe_mymod"
--      or something that you know will be unique in the hypotetical modlist's scripts' namespace, where this npe module will be added
-- SECOND STEP
--      replace in all filenames included in this template module, this script included, the string "gamma_tutorial_repair" with your chosen module name
--      replace in this script all the instances of gamma_tutorial_repair and setname as required


local found = false

-- This is basically what's ran every couple of seconds by NPE. When this returns true the tutorial associated will trigger.
function should_trigger_gun_repair_tutorial()
	if found then
		return true
	end
end

-- This isn't necessarily needed. The code here could be contained inside `should_trigger_gun_repair_tutorial` (or whatever method will become trigger for tutorial).
-- It is a good idea though to have 2 methods: 1 light that runs very quick. Another one that's tied to a callback that only runs when something happens.
function is_gun_broken(item)
    if item and IsWeapon(item) and not IsMelee(item) then
        local parts_condition = item_parts.get_parts_con(item)

        if parts_condition then
            for _, value in pairs(parts_condition) do
                if value < 60 then
                    found = true
                end
            end
        end
    end
end

-- [MANDATORY] At game start add your deck with the NPE Manager
-- you need to replace "deck_npe_gamma_tutorial_repair" with the name of your deck

function on_mcm_load()
    -- [MANDATORY] The NPE module MCM menu meeds to be populated with the sets' ids defined below (The id property inside `deck_npe_gamma_tutorial_repair`)
	local op =  {
            id      = "gamma_tutorial_repair",
            sh      = true,
            text    = "ui_mcm_npe_module_gamma_tutorial_repair",
            gr      =
            {
                -- [MANDATORY] The sets' ids defined above need to be added here. 
                -- This allow the user to check sets that have been shown (selected) and evenually replay them (unselect in mcm) if needed
				{
                    id      = "title",
                    type    = "slide",
                    link    = "ui_options_slider_player",
                    text    = "ui_mcm_npe_module_gamma_tutorial_repair_title",
                    size    =
                    {
                        512,
                        50
                    },
                    spacing = 20
                },

                -- This is set to `true` by NPE when the tutorial associated with it runs. It can be set back to false in MCM if the player wishes to replay the tutorial.
                -- NOTE: If the trigger function (should_trigger_gun_repair_tutorial) is defined like here then the variable that basically triggers the tutorial `found` won't be reset to false.
                -- This means that if the player unticks a tutorial in MCM that he previously done he will not have to do anything for the NPE tutorial window to pop up.
                {
                    id      = "gun", -- This should be the same as "deck_npe_gamma_tutorial_repair.sets[x].id"
                    type    = "check",
                    val     = 1,
                    def     = false
                },
			}
		}
	return op, "npe_module"  -- [IMPORTANT] do not change this line
end

function on_game_start()

    -- NPE has a set of events. This tutorial hovewer needed a custom one, so I "injected" it. You'll see example usage in `deck_npe_gamma_tutorial_repair`
    npe.EVENT.BROKEN_GUN_FOUND = { 
        name    = "Gun Repair System", -- this will be presented in the tutorial window as breadcrumb in the top left. It represent the context of the event and it's not localized (use english preferably)
        module  = npe.MODULE_TYPE.ANOMALY,
        handler = 
        {
            name    = "on_actor_finding_broken_gun", -- Whatever. Just be unique.
            functor = 
            {
                "npe_gamma_tutorial_repair_gun_mcm", -- Name of the `.script` file that contains the function below.
                "should_trigger_gun_repair_tutorial" -- Function that handles the BROKEN_GUN_FOUND event. If this returns true then the tutorial will trigger.
            }
        }
    }

    local deck_npe_gamma_tutorial_repair = {
        title   = "Gun Repair Tutorial",
        module  = "gamma_tutorial_repair",
        id      = "gamma_tutorial_repair",
        sets    =
        {
            {
                id      = "gun", -- Should be the same as the checkbox id in `on_mcm_load()`
                title   = "ui_mcm_npe_module_gamma_tutorial_repair_gun_title",
                cards   = -- These are the pages of a tutorial. All properties below are required. Otherwise NPE glitches out.
                {
                    [1] =
                    {
                        title       = "ui_gamma_tutorial_repair_gun_card_01_title",
                        description = "ui_gamma_tutorial_repair_gun_card_01_description",
                        image       = "broken_gun_image"
                    },
                    [2] =
                    {
                        title       = "ui_gamma_tutorial_repair_gun_card_02_title",
                        description = "ui_gamma_tutorial_repair_gun_card_02_description",
                        image       = "part_swap_image"
                    },
                    [3] =
                    {
                        title       = "ui_gamma_tutorial_repair_gun_card_03_title",
                        description = "ui_gamma_tutorial_repair_gun_card_03_description",
                        image       = "part_clean_image"
                    },
                    [4] =
                    {
                        title       = "ui_gamma_tutorial_repair_gun_card_04_title",
                        description = "ui_gamma_tutorial_repair_gun_card_04_description",
                        image       = "part_repairing"
                    },
                    [5] =
                    {
                        title       = "ui_gamma_tutorial_repair_gun_card_05_title",
                        description = "ui_gamma_tutorial_repair_gun_card_05_description",
                        image       = "obtaining_kits_image"
                    },
                },
                -- [MANDATORY] Define the context of when the set shall become active and shown
                --      context represet the way this set is triggered and shown to the player
                --      context can have the following keys:
                --      event: [MANDATORY] the event that triggers this set
                --      delay: [OPTIONAL] the delay in seconds after the event is triggered before the set is shown
                --      pause_game: [OPTIONAL] if true the game is paused when the set is shown
                --      override: [OPTIONAL] rule to override another npe module set on similar context (e.g. if you want to override the encumbrance set of another npe module)
                
                context = {
                    event = npe.EVENT.BROKEN_GUN_FOUND,
                    pause_game = true,
                },
            },
        },
    }

    if npe then
        npe_manager.Add_deck(deck_npe_gamma_tutorial_repair)
    end

	RegisterScriptCallback("actor_on_item_take", is_gun_broken)
end
